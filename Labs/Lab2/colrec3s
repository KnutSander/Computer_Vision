#!/usr/bin/env python3
"Demonstrate content-based image retrieval using 3 histograms"
import sys, math, cv2, numpy

# The number of bins in a histogram.
NBINS = 64

#------------------------------------------------------------------------------
def compare (h1, h2):
    "Work out the correlation between two histograms"
    sumx = sumy = sumxx = sumyy = sumxy = 0.0
    n = len (h1)
    for i in range (0, n):
        v1 = float (h1[i])
        v2 = float (h2[i])
        sumx += v1
        sumy += v2
        sumxx += v1 * v1
        sumxy += v1 * v2
        sumyy += v2 * v2
    v1 = sumxy - sumx * sumy / n
    v2 = math.sqrt((sumxx-sumx*sumx/n) * (sumyy-sumy*sumy/n))
    return abs (v1 / v2)

def histogram (im):
    """Determine the histogram of an image, by combining the histogram
       for all three channels into one long histogram.
       Now also converts the image into HSV and makes all background pixels
       into white pixels"""
    MAXGREY = 256

    # Convert picture to hsv format
    hsv_im = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)

    # Set upper and lower bounds for what should be considered background
    upper = numpy.array([10,255,205])
    lower = numpy.array([5,160,50])

    # Get an array of the image where pixels that are inside the bounds
    # are given the value 255 while pixels outside are given the value 0
    bg = cv2.inRange(hsv_im, lower, upper)

    # Get the image sizes.
    sizes = im.shape
    if len (sizes) == 2:
        # it's monochrome
        ny = sizes (0)
        nx = sizes (1)
        nc = 1
    else:
        # it has several channels
        ny, nx, nc = sizes

    # We shall fill the array hist with the histogram.
    # Assign it later to account for extra channels
    hist = numpy.zeros (MAXGREY * nc)

    # Work through the image, accumulating the histogram.
    # The value is assigned based on the channel

    # Trying to work around the problem a bit with this
    # Basically, if the given pixel has been assigned as background,
    # don't bother with calculating their value
    for y in range (0, ny):
        for x in range (0, nx):
            if bg[y,x] != 255:
                for c in range (0, nc):
                    v = int (im[y,x,c])
                    hist[v+(c*256)] += 1

    # Return the histogram we have computed.
    return hist

#------------------------------------------------------------------------------
# Say hello and initialize things.
if len(sys.argv) < 3:
    print ("Usage:", sys.argv[0], "<probe> <test-images>", file=sys.stderr)
    sys.exit (1)
probe_file = sys.argv[1]
v_best = 0
f_best = "?"

# Read in the probe image and find its histogram.
im = cv2.imread (probe_file)
hsv_im = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)
probe = histogram (im)

# We now enter the main loop.  The basic idea is to load an image, find its
# histogram, then compare that with the histogram of the probe image.  We are
# careful to skip the case when the test image is the same as the probe.
for file in sys.argv[2:]:
    if file != probe_file:
        im = cv2.imread (file)
        h = histogram (im)
        v = compare (probe, h)
        if v > v_best:
            v_best = v
            f_best = file

# We've finished our work, so say which of the test set best matches the
# probe and exit.
print (f_best)
